# Buildの方法 ----------------------------
#   BuildFile内のファイルを同フォルダに配置する。
#   ターミナルで移動し以下コマンド実行
#   podman build -t 任意のimage名 .


# ベースイメージとしてMiracle Linux 9.2を使用
FROM m10k/miraclelinux:9-latest

# リポジトリ設定ファイルの修正
# /etc/yum.repos.d/miraclelinux.repo のURLを変更しても何故か変更前のURLでBaseOSを探しに行くので、強制的に参照先URL変更する
RUN echo -e "[miraclelinux-baseos]\nname=Miracle Linux 9.2 - BaseOS\nbaseurl=https://repo.dist.miraclelinux.net/miraclelinux/9-latest/BaseOS/x86_64/os/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.dist.miraclelinux.net/miraclelinux/9-latest/RPM-GPG-KEY\n\n[miraclelinux-appstream]\nname=Miracle Linux 9.2 - AppStream\nbaseurl=https://repo.dist.miraclelinux.net/miraclelinux/9-latest/AppStream/x86_64/os/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.dist.miraclelinux.net/miraclelinux/9-latest/RPM-GPG-KEY" > /etc/yum.repos.d/miraclelinux.repo

# 環境変数の設定
# Pythonがコンテナ環境や開発環境で、不要なファイルを生成しないようにするために設定
ENV PYTHONDONTWRITEBYTECODE 1
# Pythonの標準入力、標準出力、標準エラーのリアルタイム出力設定
ENV PYTHONUNBUFFERED 1

# 必要なパッケージのインストール
RUN dnf -y update --releasever=9.2 && \
#RUN dnf -y update && \
    dnf install -y \
    sudo \
    wget \
    unzip \
    gcc \
    make \
    openssl \
    libffi \
    bzip2 \
    poppler \
    poppler-utils \
    openssl-devel \
    libffi-devel \
    bzip2-devel \
    cockpit \
    setroubleshoot \
    bcc-tools \
    iotop \
    kmod \
    sqlite-devel \
    libvirt \
    python3.9-devel \
    nginx \
    perf \
    postgresql-devel \
    pcp \
    pcp-libs-devel \
    pcp-devel \
    dnf-plugins-core \ 
    glibc-locale-source \
    chrony && \
    dnf clean all


# プロセスの制御・管理を行えるシステムインストール
RUN pip install supervisor
RUN pip install libvirt-python

# git,vim,syslog,timezoneのインストール
RUN yum update -y && \
    yum install -y \
    git \
    vim \
    tzdata \
    rsyslog && \
    yum clean all

# タイムゾーンを設定
ENV TZ=Asia/Tokyo
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime && echo "Asia/Tokyo" > /etc/timezone


# アプリケーションの作業ディレクトリの設定
WORKDIR /var/podman

# PostgreSQL初期化スクリプトを配置
USER root

# ロケールにja_JP.utf8を追加する
RUN localedef -f UTF-8 -i ja_JP ja_JP.UTF-8

# PostgreSQLリポジトリの追加とPostgreSQLのインストール
RUN dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm && \
    dnf -qy module disable postgresql && \
    dnf install -y postgresql16-server postgresql16-contrib && \
    dnf clean all

# PostgreSQLの初期化と設定
# データディレクトリの初期化と設定
RUN mkdir -p /var/lib/pgsql/16/data /var/run/postgresql && chown -R postgres:postgres /var/lib/pgsql /var/run/postgresql
USER postgres
RUN /usr/pgsql-16/bin/initdb --locale=ja_JP.UTF-8 -E UTF8 -D /var/lib/pgsql/16/data -U postgres && \
    echo "listen_addresses = '*'" >> /var/lib/pgsql/16/data/postgresql.conf && \
    echo "port = 5432" >> /var/lib/pgsql/16/data/postgresql.conf && \
    echo "local   all             all                                     md5" >> /var/lib/pgsql/16/data/pg_hba.conf && \
    echo "host    all             all             0.0.0.0/0            md5" >> /var/lib/pgsql/16/data/pg_hba.conf

# pg_hba.confの"trust"箇所をコメント化
RUN sed -i 's/^\(local\s\+all\s\+all\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf && \
    sed -i 's/^\(host\s\+all\s\+all\s\+127.0.0.1\/32\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf && \
    sed -i 's/^\(host\s\+all\s\+all\s\+::1\/128\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf && \
    sed -i 's/^\(local\s\+replication\s\+all\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf && \
    sed -i 's/^\(host\s\+replication\s\+all\s\+127.0.0.1\/32\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf && \
    sed -i 's/^\(host\s\+replication\s\+all\s\+::1\/128\s\+trust\)/# \1/' /var/lib/pgsql/16/data/pg_hba.conf


USER root
# Pythonのインストールとpipのセットアップでuninstallエラーになるので、先にアップデートしてアンインストールする
RUN python3 -m pip install --upgrade --force-reinstall pip && \
    rm -rf $(python3 -m site --user-site)/pip* && \
    rm -rf $(python3 -m site --user-site)/__pycache__/pip* && \
    rm -rf $(python3 -m site --user-site)/bin/pip*

# Pythonのインストールとpipのセットアップ
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3 get-pip.py && \
    rm -f get-pip.py && \
    pip install --upgrade pip && \
    pip install http-ece


# Djangoのインストール
COPY ./requirements.txt /var/podman/otherinfo/requirements.txt
RUN pip install -r /var/podman/otherinfo/requirements.txt && \
    pip install wheel && \
    pip install uwsgi


# Nginxの設定
RUN mkdir /etc/nginx/ssl && \
    openssl req -new -x509 -sha256 -newkey rsa:2048 -days 365 -nodes -out /etc/nginx/ssl/nginx.pem -keyout /etc/nginx/ssl/nginx.key -subj "/CN=localhost" && \
    chown root:root -R /etc/nginx/ssl/ && \
    chmod 600 /etc/nginx/ssl/* && \
    chmod 700 /etc/nginx/ssl && \
    setsebool -P httpd_can_network_connect 1

# uWSGIの設定
RUN mkdir /var/ppmg_sock && \
    chmod -R 777 /var/ppmg_sock

# Supervisordの設定
RUN mkdir -p /etc/supervisord/ && \
    chmod 755 /etc/supervisord/ && \
    mkdir -p /etc/supervisord/conf.d && \
    chmod 755 /etc/supervisord/conf.d && \
    mkdir -p /var/log/supervisord/ && \
    chmod 755 /var/log/supervisord/
COPY ./supervisord.conf /etc/supervisord/supervisord.conf


# Node.jsの公式リポジトリから最新のLTSバージョンをインストール
RUN curl -sL https://rpm.nodesource.com/setup_lts.x | bash - && \
    dnf install -y nodejs && \
    dnf clean all

# Node.jsのインストール
RUN npm install -g n && \
    n stable && \
    dnf remove -y nodejs npm && \
    dnf clean all

# gcc、g++、make などの基本的なビルドツールインストール
RUN dnf -y install gcc gcc-c++ make


# JREのインストール
RUN cd /usr/local/src && \
    wget -O jre-8u381-linux-x64.tar.gz https://javadl.oracle.com/webapps/download/AutoDL?BundleId=248763_8c876547113c4e4aab3c868e9e0ec572 && \
    tar zxvf jre-8u381-linux-x64.tar.gz && \
    mv jre1.8.0_381 /usr/local/jre

# Noto Sans CJK JPのインストール
RUN cd /usr/local/src && \
    wget https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip && \
    unzip NotoSansCJKjp-hinted.zip -d NotoSansCJKjp && \
    mv NotoSansCJKjp /usr/share/fonts/NotoSansCJKjp && \
    chmod 644 /usr/share/fonts/NotoSansCJKjp/* && \
    fc-cache -fv && \
    rm -rf NotoSansCJKjp-hinted.zip

# LibreOfficeのインストール
RUN cd /usr/local/src && \
    wget https://downloadarchive.documentfoundation.org/libreoffice/old/7.6.6.3/rpm/x86_64/LibreOffice_7.6.6.3_Linux_x86-64_rpm.tar.gz && \
    tar zxvf LibreOffice_7.6.6.3_Linux_x86-64_rpm.tar.gz && \
    cd LibreOffice_7.6.6.3_Linux_x86-64_rpm/RPMS && \
    dnf install -y ./*.rpm && \
    cd /usr/local/src && \
    rm -rf LibreOffice_7.6.6.3_Linux_x86-64_rpm.tar.gz LibreOffice_7.6.6.3_Linux_x86-64_rpm
    

# sshインストール (インストールだけしておく)
# 補足：winscp接続が上手くいかない。接続できても即コンテナ側から接続遮断してしまうので、
# ホストOSディレクトリのマウントで、ホストOSとゲストOS(コンテナ)とのファイル連携を行う
RUN dnf install -y openssh-server
# # SSHサーバーのディレクトリを作成
# RUN mkdir /var/run/sshd
# # rootユーザーのパスワードを設定（オプション）
# RUN echo 'root:password' | chpasswd
# # SSH設定の変更 パスワード無効化
# RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
# RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# ホスト鍵を生成
RUN ssh-keygen -A

# # SSH用の鍵を生成し、公開鍵をauthorized_keysに追加
# RUN mkdir -p /root/.ssh && \
#     ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -N '' && \
#     #ssh-keygen -t ed25519 && \
#     cat /root/.ssh/id_ed25519.pub >> /root/.ssh/authorized_keys && \
#     RUN chmod 600 /root/.ssh/authorized_keys && \
#     chmod 700 /root/.ssh


# logファイルフォルダの作成
RUN mkdir -p /var/log/ppmg && \
    touch /var/log/ppmg/app.log


# コンテナ起動時に実行するスクリプトの作成
COPY ./start.sh /var/podman/start.sh
RUN chmod 777 /var/podman/start.sh

# Cockpitを有効化
#RUN systemctl enable cockpit

# コンテナ起動時に実行するコマンドを指定
CMD ["/var/podman/start.sh"]

# 必要なポートを公開
EXPOSE 80 443 5432 22 8000
